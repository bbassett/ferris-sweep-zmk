/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define NAV_L 1
#define OTHER_L 2
#define NUM_L 3
#define SYM_L 4

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace

&lt { quick-tap-ms = <200>; };

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        layer5 {
            bindings = <&mo 5>;
            key-positions = <32 31>;
        };

        layer2 {
            bindings = <&mo 2>;
            key-positions = <33 30>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q        &kp W        &kp E       &kp R            &kp T        &kp Y            &kp U        &kp I       &kp O        &kp P
&hm LSHFT A  &hm LCTRL S  &hm LALT D  &hm LCMD F       &kp G        &kp H            &hm LCMD J   &hm RALT K  &hm RCTRL L  &hm RSHFT ENTER
&kp Z        &kp X        &kp C       &kp V            &kp B        &kp N            &kp M        &kp COMMA   &kp DOT      &kp FSLH
                                      &mt CAPS ESCAPE  &lt 3 TAB    &lt 4 BACKSPACE  &lt 1 SPACE
            >;
        };

        symbols {
            bindings = <
&kp LS(EXCL)    &kp LS(AT)  &kp LS(POUND)  &kp LS(DLLR)   &kp LS(PRCNT)    &kp LS(CARET)   &kp LS(AMPS)       &kp LS(STAR)      &kp LS(LPAR)       &kp LS(RPAR)
&kp LEFT_SHIFT  &kp MINUS   &kp LS(PLUS)   &kp LS(UNDER)  &kp EQUAL        &kp LEFT_BRACE  &kp RIGHT_BRACE    &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp PIPE
&trans          &trans      &trans         &trans         &trans           &kp SQT         &kp DOUBLE_QUOTES  &kp SEMICOLON     &kp COLON          &kp BACKSLASH
                                           &trans         &trans           &kp DELETE      &trans
            >;
        };

        window_media {
            bindings = <
&kp LA(LG(N1))  &kp LA(LG(N2))  &kp LA(LG(N3))  &kp LA(LG(N4))  &kp LA(LG(N5))    &trans  &kp K_MUTE   &kp C_VOL_DN      &kp C_VOL_UP  &trans
&kp LS(LA(A))   &kp LS(LA(X))   &kp LS(LA(D))   &kp LS(LA(F))   &kp LCMD          &kp Q   &kp LS(TAB)  &kp TAB           &kp GRAVE     &trans
&kp LG(LS(N1))  &kp LG(LS(N2))  &kp LG(LS(N3))  &kp LG(LS(N4))  &kp LA(LS(L))     &trans  &kp C_PREV   &kp C_PLAY_PAUSE  &kp C_NEXT    &trans
                                                &trans          &trans            &trans  &trans
            >;
        };

        num_arrows {
            bindings = <
&kp N1          &kp N2            &kp N3        &kp N4            &kp N5                      &kp N6                     &kp N7    &kp N8        &kp N9     &kp N0
&kp LEFT_SHIFT  &kp LEFT_CONTROL  &kp LEFT_ALT  &kp LEFT_COMMAND  &trans                      &kp LEFT                   &kp DOWN  &kp UP_ARROW  &kp RIGHT  &trans
&trans          &trans            &trans        &trans            &kp LS(LG(LEFT_BRACKET))    &kp LS(LG(RIGHT_BRACKET))  &trans    &trans        &trans     &trans
                                                &trans            &trans                      &trans                     &trans
            >;
        };

        mouse {
            bindings = <
&trans     &trans     &trans     &trans     &trans       &trans     &trans     &trans     &trans     &trans
&kp RG(F)  &kp RG(D)  &kp RG(V)  &kp RG(R)  &kp RG(S)    &kp RG(H)  &kp RG(J)  &kp RG(K)  &kp RG(L)  &trans
&trans     &trans     &trans     &trans     &trans       &trans     &trans     &trans     &trans     &trans
                                 &trans     &trans       &trans     &trans
            >;
        };

        bootloader {
            bindings = <
&trans       &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&bootloader  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans       &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                             &trans  &trans    &trans  &trans
            >;
        };
    };
};
